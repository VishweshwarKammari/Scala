#scala variables
val immutable

val x = 10;
x = "Nitin"

var mutable

var x = 10;
x = "Nitin"

assigning block expression
it is normally not availabe in most of the programming languages. Scala supports it. Last expression automatically becomes the return type without stating the return.
val a = {var p = 100; var q = 80; p-q}

Lazy variable
val x = scala.io.Source.fromFile("input.txt").mkString

lazy val x = scala.io.Source.fromFile("input.txt").mkString

control structures
val x = 10
val y = if(x > 7 && x < 15) 1 else 0

val y = if(x > 7 && x < 15) {1 } else {0}

val y = {
if(x > 7 && x < 15) 
{
1
} 
else
{
 0
}
}

val y = if(x > 7 || x < 15) {1} else {0}

val y = if(x > 7 && x < 15) "positive" else 0

any is a super class for string and int.


Loops
foreach

var x = "Nitin"

for

var sum = 0
for(x<- 1 to 5) sum += 1


for(x<- 1 until 5) sum += 1

for(x<-1 to 3; y<-1 to 3) println(10*x + y)


for(x<-1 to 3; y<-1 to 3 if(x==y)) println(10*x + y)

for(x<-1 to 3;  i=4-x; y<-i to 3 ) println(10*x + y)

#DO WHILE

var i = 5
do{
println(i)
i += 1 //i = i+1
}
while(i<10)

def area(inRadious:Int):Double={3.14 * inRadious * inRadious}

var x = area(1)
var x = area(10)

def area(inRadious:Int):Double=3.14 * inRadious * inRadious

def area(inRadious:Int)=3.14 * inRadious * inRadious

def factorial(input:Int):Int={if(input==1){1}else{input*factorial(input-1)}}

def factorial(input:Int):Int=if(input==1){1}else{input*factorial(input-1)}

def factorial(input:Int)=if(input==1){1}else{input*factorial(input-1)}

def concat(input1:String,input2:String="Nitin",input3:String="kumar")=input1 + " "+ input2 + " " + input3

println(concat("hi"))

println(concat("hi","himanshu"))

println(concat("hi",input3="sharma"))

#procedure : does return any value and = sign is missing. Procedure cannot be recursive as they dont return anything.
def recarea(length:Int,width:Int){val x = length * width; println(x)}

recarea(1,2)
recarea(2,3)

#collections
#Array
#they dont have fixed length

val x:Array[Int]=Array[Int](1,2,3,4,5)
x
val x=Array[Int](1,2,3,4,5)
x

x(0)
x(4)

x(5) = 5
x.foreach(println)

#declaring without initiation

var x = new Array[Int](5)
x(0) = 5

import scala.collection.mutable.ArrayBuffer
var x = ArrayBuffer[Int]()
x += 1
x += 12
x += 25
x -= 25

x.foreach(println)


x += (1,2,3)

x ++= Array(4,5,6)
x.remove(0)


#Map

var x = Map[String,String]("Nitin"->"Kumar","Yogesh"->"Jain","Bhupender"->"Singh")

x("Nitin")
x("sushil")="singh"

var x = scala.collection.mutable.Map[String,String]("Nitin"->"Kumar","Yogesh"->"Jain","Bhupender"->"Singh")
x("sushil")="singh"

//to be discussed further tomorrow

var inputJson = """{"Name" : "Srikant", "Age" : "20", "Colleagues":["Anant","Prabhakaran"], "Address":{"plotno":"D2","city":"Gurgaon"}}"""

import scala.util.parsing.json.JSON

JSON.parseFull(inputJson) match {
case Some(newJson) =>
{
for(x <- newJson.asInstanceOf[Map[String,Any]].keys)
{
println(x.toString + " : " + newJson.asInstanceOf[Map[String,Any]](x))
}
}
case None => {println("found some wrong Jsone")}
}

//to be discussed further tomorrow

val x = scala.collection.mutable.Map[String,String]("Nitin"->"Kumar","Yogesh"->"Jain","Bhupender"->"Singh")

x("sushil")="singh"

val x = scala.collection.mutable.Map[String,String]("Nitin"->"Kumar","Yogesh"->"Jain","Bhupender"->"Singh", "Bhupender"->"Yadav")

#we cannot have same keys getting repeated

#tuple
#tuple is like rows of table where we can have multiple fields of different data types.
var x = (1,"Nitin","Kumar",7878787.89)
x._1
x._4

x.foreach(println)
x.productIterator.foreach(println)


#offset is starting with 1

x _1

#if you have a function which is going to return more than value, tuples are the good choice.
#also used in key value pair rdd which we are going to use heavily.

#sets : set of similar data type without any duplicate
var x = Set(1,2,3,4,4)
x.head
x.tail
x.isEmpty

var y = Set(4,5,6,7)
x ++ y

x.intersect(y)

var x = List(1,2,3)
x(0)

var y = List(4,5,6)
x ++ y

List.concat(x,y)



def sum(input
      :List[Int]):Int =
      {if(input.length==1)
      {
      input.head
      }
      else
      {
     	input.head + sum(input.tail)
      }
      }

sum(List(1,2,3))

list is either nil or combination of head and tail where tail is again a list.

x==Nil
x.tail.tail.tail==Nil


